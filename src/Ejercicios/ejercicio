Ejercicio 5: Lista de Tareas
Una tarea es una acción que debe realizarse. Habitualmente todas las tareas que tenemos pendientes las ponemos en una lista, y en la medida que las vamos cumpliendo, las vamos "tachando". Queremos empezar a construir una app que gestione esta lista de tareas.
Una tarea es una descripción, que además contiene una prioridad y un estado (Si está completa o incompleta). Además, una tarea puede tener una fecha límite. Si la tarea sobrepasa esta fecha y su estado es incompleta, vamos a decir que la tarea está vencida.
A una tarea, le podemos modificar su descripción, cambiarle la prioridad y avisar que está terminada. Además, podemos querer mostrar la tarea, en cuyo caso muestra la descripción. Pero, si la tarea está terminada, el mensaje debería iniciar con el string "(Vencida)...".
A una tarea queremos poder preguntarle si se encuentra vencida o no, como así también le podemos consultar si está completa o no.
Se pide:

Generar un diagrama de clase simple de la clase Tarea.
Generar el código en Java que represente la tarea. Debe incluir todos los métodos derivados de la descripción.
Generar un programa en Java que haga uso de la clase Tarea, y cree las siguientes tareas:

"Ir al supermercado mañana". Debe tener la fecha límite establecida y estar incompleta.
"Consultar repuesto del auto". Debe tener la fecha límite para ayer y estar completa.
"Ir al cine a ver la nueva película de Marvel". Debe tener fecha límite de ayer y estar incompleta.



Este último programa debe configurar el estado especificado en cada objeto, y mostrar sus mensajes respectivos.
Tip: Es posible que deba revisar el funcionamiento de la clase java.time.LocalDate de Java.


Se requiere implementar una clase que represente y pueda resolver una ecuación de segundo grado.
 Dada una ecuación de 2do grado de la forma y = a * x^2 + b * x + c,
 la fórmula para el cálculo de las raíces es (-b ± √((b^2) - (4 * a * c))) / (2 * a).
 Una vez que se crea una instancia de la clase no se podrán modificar sus coeficientes.
 Recordar que puede darse el caso donde exista una única raíz y para que esto ocurra el discriminante
 ((b^2) - 4 * a * c) debe ser igual a 0. En este último caso, en vez de retornar 2 raíces se debería retornar una sola.
  Existe el caso también donde necesitemos calcular el valor de y en base al valor de x, que se pasa como parámetro.
Objetivos:

Definir estructura y comportamiento.
Crear una clase que utilice a la anterior y que pruebe todos los métodos con varios resultados.






